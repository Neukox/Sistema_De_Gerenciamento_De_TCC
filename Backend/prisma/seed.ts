import { $Enums, PrismaClient } from "@prisma/client";
import { PrismaClientKnownRequestError } from "@prisma/client/runtime/library";
import bcrypt from "bcryptjs";

const prisma = new PrismaClient();

type AreasConhecimento = Record<$Enums.CategoriasAreasConhecimento, string[]>;

const areasConhecimento: AreasConhecimento = {
  CIENCIAS_EXATAS: [
    "Matem√°tica",
    "Probabilidade e Estat√≠stica",
    "Ci√™ncia da Computa√ß√£o",
    "Astronomia",
    "F√≠sica",
    "Qu√≠mica",
    "Geoci√™ncias",
    "Oceanografia",
  ],
  CIENCIAS_HUMANAS: [
    "Filosofia",
    "Sociologia",
    "Antropologia",
    "Arqueologia",
    "Hist√≥ria",
    "Geografia",
    "Psicologia",
    "Educa√ß√£o",
    "Ci√™ncia Pol√≠tica",
    "Teologia",
  ],
  CIENCIAS_BIOLOGICAS: [
    "Biologia Geral",
    "Gen√©tica",
    "Bot√¢nica",
    "Zoologia",
    "Ecologia",
    "Morfologia",
    "Fisiologia",
    "Bioqu√≠mica",
    "Biof√≠sica",
    "Farmacologia",
    "Imunologia",
    "Microbiologia",
    "Parasitologia",
    "Biotecnologia",
  ],
  ENGENHARIAS: [
    "Engenharia Civil",
    "Engenharia de Minas",
    "Engenharia de Materiais e Metal√∫rgica",
    "Engenharia El√©trica",
    "Engenharia Mec√¢nica",
    "Engenharia Qu√≠mica",
    "Engenharia Sanit√°ria",
    "Engenharia de Produ√ß√£o",
    "Engenharia Nuclear",
    "Engenharia de Transportes",
    "Engenharia Naval e Oce√¢nica",
    "Engenharia Aeroespacial",
    "Engenharia Biom√©dica",
    "Engenharia de Software",
    "Engenharia de Controle e Automa√ß√£o",
    "Engenharia Ambiental",
    "Engenharia de Alimentos",
    "Engenharia Florestal",
    "Engenharia Agr√≠cola",
    "Engenharia de Pesca",
    "Engenharia Cartogr√°fica",
    "Engenharia Textil",
    "Engenharia de Petr√≥leo",
    "Engenharia de Telecomunica√ß√µes",
  ],
  SAUDE: [
    "Medicina",
    "Odontologia",
    "Farm√°cia",
    "Enfermagem",
    "Nutri√ß√£o",
    "Sa√∫de Coletiva",
    "Fonoaudiologia",
    "Fisioterapia e Terapia Ocupacional",
    "Educa√ß√£o F√≠sica",
    "Medicina Veterin√°ria",
    "Psicologia",
    "Biomedicina",
    "Radiologia",
    "Terapia Ocupacional",
  ],
  CIENCIAS_AGRARIAS: [
    "Agronomia",
    "Recursos Florestais e Engenharia Florestal",
    "Engenharia Agr√≠cola",
    "Zootecnia",
    "Medicina Veterin√°ria",
    "Recursos Pesqueiros e Engenharia de Pesca",
    "Ci√™ncia e Tecnologia de Alimentos",
  ],
  CIENCIAS_SOCIAIS: [
    "Direito",
    "Administra√ß√£o",
    "Economia",
    "Arquitetura e Urbanismo",
    "Planejamento Urbano e Regional",
    "Demografia",
    "Ci√™ncia da Informa√ß√£o",
    "Museologia",
    "Comunica√ß√£o",
    "Servi√ßo Social",
    "Economia Dom√©stica",
    "Desenho Industrial",
    "Turismo",
    "Rela√ß√µes Internacionais",
    "Contabilidade",
    "Marketing",
    "Recursos Humanos",
    "Log√≠stica",
    "Com√©rcio Exterior",
    "Gest√£o P√∫blica",
    "Gest√£o Ambiental",
    "Secretariado Executivo",
  ],
  ARTES: [
    "Artes",
    "M√∫sica",
    "Teatro",
    "Dan√ßa",
    "Cinema",
    "Fotografia",
    "Design Gr√°fico",
    "Design de Moda",
    "Artes Visuais",
  ],
  LINGUISTICA: [
    "Lingu√≠stica",
    "Letras",
    "Literatura",
    "Tradu√ß√£o",
    "Jornalismo",
    "Publicidade e Propaganda",
    "R√°dio e TV",
    "Rela√ß√µes P√∫blicas",
  ],
  TECNOLOGIA: [
    "Nanotecnologia",
    "Rob√≥tica",
    "Intelig√™ncia Artificial",
    "An√°lise de Dados",
    "Seguran√ßa da Informa√ß√£o",
    "Banco de Dados",
    "Redes de Computadores",
    "Sistemas de Informa√ß√£o",
    "Jogos Digitais",
    "Design de Intera√ß√£o",
    "UX/UI Design",
    "E-commerce",
    "Empreendedorismo",
    "Inova√ß√£o",
    "Sustentabilidade",
    "Energia Renov√°vel",
    "Automa√ß√£o Industrial",
    "Internet das Coisas (IoT)",
    "Blockchain",
    "Realidade Virtual",
    "Realidade Aumentada",
  ],
  OUTROS: [
    "Multidisciplinar",
    "Ensino",
    "Materiais",
    "Biotecnologia",
    "Ci√™ncias Ambientais",
    "Bio√©tica",
    "Divulga√ß√£o Cient√≠fica",
    "Pol√≠tica Cient√≠fica e Tecnol√≥gica",
    "Desenvolvimento Sustent√°vel",
    "Estudos de G√™nero",
    "Estudos Culturais",
    "Gerontologia",
    "Neuroci√™ncias",
    "Bioengenharia",
  ],
};

// Dados dos professores para seed
const professores = [
  {
    nome_completo: "Dr. Carlos Silva",
    email: "carlos.silva@universidade.edu.br",
    area_atuacao: "Ci√™ncia da Computa√ß√£o",
  },
  {
    nome_completo: "Dra. Maria Santos",
    email: "maria.santos@universidade.edu.br", 
    area_atuacao: "Engenharia de Software",
  },
  {
    nome_completo: "Dr. Jo√£o Oliveira",
    email: "joao.oliveira@universidade.edu.br",
    area_atuacao: "Intelig√™ncia Artificial",
  },
  {
    nome_completo: "Dra. Ana Costa",
    email: "ana.costa@universidade.edu.br",
    area_atuacao: "Banco de Dados",
  },
  {
    nome_completo: "Dr. Pedro Ferreira",
    email: "pedro.ferreira@universidade.edu.br",
    area_atuacao: "Redes de Computadores",
  },
  {
    nome_completo: "Dra. Lucia Pereira",
    email: "lucia.pereira@universidade.edu.br",
    area_atuacao: "Seguran√ßa da Informa√ß√£o",
  },
  {
    nome_completo: "Dr. Roberto Lima",
    email: "roberto.lima@universidade.edu.br",
    area_atuacao: "Sistemas Distribu√≠dos",
  },
  {
    nome_completo: "Dra. Fernanda Rocha",
    email: "fernanda.rocha@universidade.edu.br",
    area_atuacao: "Interface Humano-Computador",
  },
  {
    nome_completo: "Dr. Marcos Almeida",
    email: "marcos.almeida@universidade.edu.br",
    area_atuacao: "Algoritmos e Estruturas de Dados",
  },
  {
    nome_completo: "Dra. Patricia Gomes",
    email: "patricia.gomes@universidade.edu.br",
    area_atuacao: "Computa√ß√£o Gr√°fica",
  },
];

async function seedProfessores() {
  console.log("üéì Iniciando seed dos professores...");

  const existingProfessores = await prisma.professor.count();

  if (existingProfessores > 0) {
    console.log(`‚ö†Ô∏è  J√° existem ${existingProfessores} professores cadastrados.`);
    console.log("üîÑ Adicionando apenas os novos professores...");
  }

  let adicionados = 0;
  let ignorados = 0;

  for (const professorData of professores) {
    try {
      // Verificar se o usu√°rio j√° existe
      const existingUsuario = await prisma.usuario.findUnique({
        where: { email: professorData.email },
      });

      if (existingUsuario) {
        ignorados++;
        console.log(`‚ö™ Professor "${professorData.nome_completo}" j√° existe, ignorando.`);
        continue;
      }

      // Criar senha padr√£o hash
      const senhaHash = await bcrypt.hash("123456", 10);

      // Criar usu√°rio e professor
      await prisma.usuario.create({
        data: {
          nome_completo: professorData.nome_completo,
          email: professorData.email,
          senha: senhaHash,
          tipo: "PROFESSOR",
          Professor: {
            create: {
              area_atuacao: professorData.area_atuacao,
              disponibilidade: true,
            },
          },
        },
      });

      adicionados++;
      console.log(`‚úÖ Professor "${professorData.nome_completo}" adicionado com sucesso.`);
    } catch (error) {
      console.error(`‚ùå Erro ao adicionar professor "${professorData.nome_completo}":`, error);
    }
  }

  console.log("\nüìä Resumo dos professores:");
  console.log(`‚úÖ Professores adicionados: ${adicionados}`);
  console.log(`‚ö™ Professores j√° existentes: ${ignorados}`);
  console.log(`üë®‚Äçüè´ Total de professores: ${adicionados + existingProfessores}`);
}

async function main() {
  console.log("Rodando seed...");

  // Criar admin se n√£o existir
  const existingAdmin = await prisma.usuario.findUnique({
    where: { email: "Gabrielcfonline0900@gmail.com" },
  });

  if (!existingAdmin) {
    await prisma.usuario.create({
      data: {
        nome_completo: "Admin do Sistema",
        email: "Gabrielcfonline0900@gmail.com",
        senha: "10668889730",
        tipo: "ADMIN",
      },
    });
    console.log("‚úÖ Admin criado com sucesso.");
  } else {
    console.log("‚ö™ Admin j√° existe, ignorando.");
  }

  console.log("\n" + "=".repeat(50) + "\n");

  // Seed dos professores
  await seedProfessores();

  console.log("\n" + "=".repeat(50) + "\n");

  console.log("üå± Iniciando seed das √°reas de conhecimento...");

  // Verificar se j√° existem √°reas cadastradas
  const existingAreas = await prisma.areaConhecimento.count();

  if (existingAreas > 0) {
    console.log(`‚ö†Ô∏è  J√° existem ${existingAreas} √°reas cadastradas.`);
    console.log("üîÑ Adicionando apenas as novas √°reas...");
  }

  let adicionadas = 0;
  let ignoradas = 0;

  for (const [categoria, areas] of Object.entries(areasConhecimento)) {
    for (const nome of areas) {
      try {
        await prisma.areaConhecimento.upsert({
          where: { nome },
          update: {},
          create: {
            categoria: categoria as $Enums.CategoriasAreasConhecimento,
            nome,
          },
        });
        adicionadas++;
        console.log(`‚úÖ √Årea "${nome}" adicionada com sucesso.`);
      } catch (error) {
        if (
          error instanceof PrismaClientKnownRequestError &&
          error.code === "P2002"
        ) {
          // Erro de unicidade, √°rea j√° existe
          ignoradas++;
          console.log(`‚ö™ √Årea "${nome}" j√° existe, ignorando.`);
        } else {
          console.error(`‚ùå Erro ao adicionar a √°rea "${nome}":`, error);
        }
      }
    }
  }

  console.log("\nüìä Resumo:");
  console.log(`‚úÖ √Åreas adicionadas: ${adicionadas}`);
  console.log(`‚ö™ √Åreas j√° existentes: ${ignoradas}`);
  console.log(`üìö Total de √°reas: ${adicionadas + existingAreas}`);
  console.log("\nüéâ Seed conclu√≠do com sucesso!");
}

main()
  .catch((e) => {
    console.error("‚ùå Erro no seed:", e);
    throw e;
  })
  .finally(async () => {
    await prisma.$disconnect();
  });

console.log("Seed conclu√≠do com sucesso.");
