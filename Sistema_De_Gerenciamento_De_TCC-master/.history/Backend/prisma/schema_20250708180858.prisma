// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

enum TipoUsuario {
  ADMIN
  ALUNO
  PROFESSOR
}

enum PapelBanca {
  ORIENTADOR
  COORIENTADOR
}

enum StatusTCC {
  PLANEJAMENTO
  DESENVOLVIMENTO
  REVISAO
  FINALIZACAO
  CONCLUIDO
}

model Usuario {
  id            Int      @id @default(autoincrement())
  nomeCompleto  String
  email         String   @unique
  senha         String
  tipo          String
  role          String
  criado_em     DateTime @default(now())
  atualizado_em DateTime @updatedAt

model Usuario {
  id             Int             @id @default(autoincrement())
  nome           String
  sobrenome      String
  email          String          @unique
  senha          String
  tipo           TipoUsuario
  criado_em      DateTime        @default(now())
  atualizado_em  DateTime        @updatedAt

  Aluno          Aluno?
  Professor      Professor?
  Comentarios    Comentario[]
}

model Aluno {
  id          Int     @id
  curso       String
  instituicao String
  usuario     Usuario @relation(fields: [id], references: [id])
  tcc         TCC?
}

model Professor {
  fk_Usuario_id  Int             @id
  area_atuacao   String
  disponibilidade Boolean

  Usuario        Usuario         @relation(fields: [fk_Usuario_id], references: [id])
  Bancas         Banca[]
}

model TCC {
  id                 Int      @id @default(autoincrement())
  titulo             String
  tema               String
  resumo             String
  criado_em          DateTime @default(now())
  ultima_atualizacao DateTime @updatedAt

  FK_Aluno_fk_Usuario_id Int

  Aluno               Aluno           @relation(fields: [FK_Aluno_fk_Usuario_id], references: [fk_Usuario_id])
  Bancas              Banca[]
  Atividades          Atividade[]
  Comentarios         Comentario[]
}

model Banca {
  fk_TCC_id                  Int
  fk_Professor_fk_Usuario_id Int
  papel                      PapelBanca

  TCC                        TCC       @relation(fields: [fk_TCC_id], references: [id])
  Professor                  Professor @relation(fields: [fk_Professor_fk_Usuario_id], references: [fk_Usuario_id])

  @@id([fk_TCC_id, fk_Professor_fk_Usuario_id])
}

model Atividade {
  id            Int             @id @default(autoincrement())
  nome          String
  descricao     String
  status        StatusAtividade
  data_entrega  DateTime
  arquivo_url   String?
  concluido_em  DateTime?

  fk_TCC_id     Int

  TCC           TCC             @relation(fields: [fk_TCC_id], references: [id])
  Comentarios   Comentario[]
}

model Comentario {
  id                Int          @id @default(autoincrement())
  topico            String
  texto             String
  data_criacao      DateTime     @default(now())
  ultima_atualizacao DateTime    @updatedAt

  fk_TCC_id         Int
  fk_Usuario_id     Int
  fk_Atividades_id  Int?

  TCC               TCC          @relation(fields: [fk_TCC_id], references: [id])
  Usuario           Usuario      @relation(fields: [fk_Usuario_id], references: [id])
  Atividade         Atividade?   @relation(fields: [fk_Atividades_id], references: [id])
}
